name: Create release

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to promote to release (default is latest)
        required: false
        default: 'latest'
      name:
        description: Name of this release
        required: true
        default: ''
      tag:
        description: Tag of this release (needs to be semantic version string https://semver.org)
        required: true
        default: ''
      prerelease:
        description: Prerelease (Y/N)
        required: false
        default: 'N'
      draft:
        description: Draft (Y/N)
        required: false
        default: 'N'
      createReleaseBranch:
        description: Create Release Branch (Y/N)
        required: false
        default: 'N'
      updateVersionNumber:
        description: New Version Number in main branch. Use Major.Minor for absolute change, use +Major.Minor for incremental change.
        required: false
        default: ''
      directCommit:
        description: Direct COMMIT (Y/N)
        required: false
        default: 'N'

permissions:
  contents: write
  pull-requests: write
  actions: read

concurrency: release

defaults:
  run:
    shell: PowerShell

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialize the workflow
        id: init
        uses: microsoft/AL-Go-Actions/WorkflowInitialize@preview
        with:
          eventId: "DO0094"

  CreateRelease:
    runs-on: [ windows-latest ]
    needs: [ Initialization ]
    outputs:
      artifacts: ${{ steps.analyzeartifacts.outputs.artifacts }}
      upload_url: ${{ steps.createrelease.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          get: TemplateUrl

      - name: Check for updates to AL-Go system files
        uses: microsoft/AL-Go-Actions/CheckForUpdates@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          templateUrl: ${{ env.TemplateUrl }}

      - name: Analyze Artifacts
        id: analyzeartifacts
        run: |
          Write-Host "Analyzing artifacts"
          $appVersion = '${{ github.event.inputs.appVersion }}'
          $headers = @{ 
              "Authorization" = "token ${{ github.token }}"
              "Accept"        = "application/json"
          }
          $allArtifacts = Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri "$($ENV:GITHUB_API_URL)/repos/$($ENV:GITHUB_REPOSITORY)/actions/artifacts" | ConvertFrom-Json
          $artifactsVersion = $appVersion
          if ($appVersion -eq "latest") {
            $artifact = $allArtifacts.artifacts | Where-Object { $_.name -like "*Apps-*" } | Select-Object -First 1
            $artifactsVersion = $artifact.name.SubString($artifact.name.IndexOf('Apps-')+5)
          }
          $include = @()
          $allArtifacts.artifacts | Where-Object { $_.name -like "*Apps-$($artifactsVersion)" } | ForEach-Object {
            $include += $( [ordered]@{ "name" = $_.name; "url" = $_.archive_download_url } )
          }
          if ($include.Count -eq 0) {
            Write-Host "::Error::No artifacts found"
            exit 1
          }
          $artifacts = @{ "include" = $include }
          $artifactsJson = $artifacts | ConvertTo-Json -compress
          Write-Host "::set-output name=artifacts::$artifactsJson"
          Write-Host "set-output name=artifacts::$artifactsJson"

      - name: Prepare release notes
        id: createreleasenotes
        uses: microsoft/AL-Go-Actions/CreateReleaseNotes@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          tag_name: '${{github.event.inputs.tag}}'

      - name: Create release
        uses: actions/create-release@v1
        id: createrelease
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: ${{ github.event.inputs.draft=='Y' }}
          prerelease: ${{ github.event.inputs.prerelease=='Y' }}
          release_name: '${{ github.event.inputs.name }}'
          tag_name: '${{ github.event.inputs.tag }}'
          body: ${{ steps.createreleasenotes.outputs.releaseNotes }}

  UploadArtifacts:
    runs-on: [ windows-latest ] 
    needs: [ CreateRelease ]
    strategy:
      matrix: ${{ fromJson(needs.CreateRelease.outputs.artifacts) }}
      fail-fast: true
    steps:
      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}

      - name: Read secrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@preview
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          settingsJson: ${{ env.Settings }}
          secrets: 'StorageContext'

      - name: Download artifact
        run: |
          Write-Host "Downloading artifact ${{ matrix.name}}"
          $headers = @{ 
              "Authorization" = "token ${{ github.token }}"
              "Accept"        = "application/vnd.github.v3+json"
          }
          Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri '${{ matrix.url }}' -OutFile '${{ matrix.name }}.zip'
          
      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.createrelease.outputs.upload_url }}
          asset_path: '${{ matrix.name }}.zip'
          asset_name: '${{ matrix.name }}.zip'
          asset_content_type: application/zip

      - name: Publish To Storage
        id: PublishToStorage
        run: |
          if ($ENV:StorageContext) {
              try {
                  if (get-command New-AzureStorageContext -ErrorAction SilentlyContinue) {
                      Write-Host "Using Azure.Storage PowerShell module"
                      Disable-AzureDataCollection
                  }
                  else {
                      if (!(get-command New-AzStorageContext -ErrorAction SilentlyContinue)) {
                          OutputError -message "When publishing to storage account, the build agent needs to have either the Azure.Storage or the Az.Storage PowerShell module installed."
                          exit
                      }
                      Write-Host "Using Az.Storage PowerShell module"
                      Set-Alias -Name New-AzureStorageContext -Value New-AzStorageContext
                      Set-Alias -Name Get-AzureStorageContainer -Value Get-AzStorageContainer
                      Set-Alias -Name Set-AzureStorageBlobContent -Value Set-AzStorageBlobContent
                  }

                  $storageContext = $ENV:StorageContext

                  $storageAccount = $StorageContext | ConvertFrom-Json
                  if ($storageAccount.PSObject.Properties.Name -eq "sastoken") {
                      $storageContext = New-AzureStorageContext -StorageAccountName $storageAccount.StorageAccountName -SasToken $storageAccount.sastoken
                  }
                  else {
                      $storageContext = New-AzureStorageContext -StorageAccountName $storageAccount.StorageAccountName -StorageAccountKey $storageAccount.StorageAccountKey
                  }

                  $name = '${{ matrix.name }}'
                  $type = ""
                  if ($name -like '*-Apps-*') {
                      $idx = $name.indexOf('-Apps-')
                      $version = $name.SubString($idx+6)
                      $projectName = $name.SubString(0,$idx) -replace "[^a-z0-9]", "-"
                      $type = 'Apps'
                  }
                  elseif ($name -like '*-TestApps-*') {
                      $idx = $name.indexOf('-TestApps-')
                      $version = $name.SubString($idx+10)
                      $projectName = $name.SubString(0,$idx) -replace "[^a-z0-9]", "-"
                      $type = 'TestApps'
                  }

                  $storageContainerName = $storageAccount.ContainerName.ToLowerInvariant().replace('{project}',$projectName).ToLowerInvariant()
                  Get-AzureStorageContainer -Context $storageContext -name $storageContainerName | Out-Null
                  $storageBlobName = $storageAccount.BlobName.ToLowerInvariant()
                  Write-Host "Storage Context OK"

                  if ($type) {
                      $version, "latest" | ForEach-Object {
                          $blob = $storageBlobName.replace('{project}',$projectName).replace('{version}',$_).replace('{type}',$type).ToLowerInvariant()
                          Write-Host "Publishing $blob to $storageContainerName"
                          Set-AzureStorageBlobContent -Context $storageContext -Container $storageContainerName -File '${{ matrix.name }}.zip' -blob $blob -Force
                      }
                  }
              }
              catch {
                Write-Host $_.Exception.Message
                  Write-Host "::Error::StorageContext secret is malformed. Needs to be formatted as Json, containing StorageAccountName, ContainerName, BlobName and sastoken or storageAccountKey, which points to an existing container in a storage account."
                  exit 1
              }
          }

  CreateReleaseBranch:
    if: ${{ github.event.inputs.createReleaseBranch=='Y' }}
    runs-on: [ windows-latest ]
    needs: [ Initialization, CreateRelease, UploadArtifacts ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Release Branch
        run: |
          git checkout -b release/${{ github.event.inputs.tag }}
          git config user.name ${{ github.actor}}
          git config user.email ${{ github.actor}}@users.noreply.github.com
          git commit --allow-empty -m "Release branch ${{ github.event.inputs.tag }}"
          git push origin release/${{ github.event.inputs.tag }}

  UpdateVersionNumber:
    if: ${{ github.event.inputs.updateVersionNumber!='' }}
    runs-on: [ windows-latest ]
    needs: [ Initialization, CreateRelease, UploadArtifacts ]
    steps:
      - name: Update Version Number
        uses: microsoft/AL-Go-Actions/IncrementVersionNumber@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          versionNumber: ${{ github.event.inputs.updateVersionNumber }}
          directCommit: ${{ github.event.inputs.directCommit }}

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, CreateRelease, UploadArtifacts, CreateReleaseBranch, UpdateVersionNumber ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Finalize the workflow
        id: PostProcess
        uses: microsoft/AL-Go-Actions/WorkflowPostProcess@preview
        with:
          eventId: "DO0094"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
